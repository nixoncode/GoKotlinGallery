// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: images.sql

package sqlc

import (
	"context"
	"database/sql"

	"github.com/sqlc-dev/pqtype"
)

const createImage = `-- name: CreateImage :one
INSERT INTO images
    (filename, description, metadata)
VALUES
    ($1, $2, $3)
RETURNING id, filename, description, metadata, created_at
`

type CreateImageParams struct {
	Filename    string                `json:"filename"`
	Description sql.NullString        `json:"description"`
	Metadata    pqtype.NullRawMessage `json:"metadata"`
}

func (q *Queries) CreateImage(ctx context.Context, arg CreateImageParams) (Image, error) {
	row := q.db.QueryRowContext(ctx, createImage, arg.Filename, arg.Description, arg.Metadata)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.Filename,
		&i.Description,
		&i.Metadata,
		&i.CreatedAt,
	)
	return i, err
}

const getImage = `-- name: GetImage :one
SELECT id, filename, description, metadata, created_at
FROM images
WHERE filename = $1
`

func (q *Queries) GetImage(ctx context.Context, filename string) (Image, error) {
	row := q.db.QueryRowContext(ctx, getImage, filename)
	var i Image
	err := row.Scan(
		&i.ID,
		&i.Filename,
		&i.Description,
		&i.Metadata,
		&i.CreatedAt,
	)
	return i, err
}

const listAllImageDetails = `-- name: ListAllImageDetails :many
SELECT filename, metadata, description
FROM images
`

type ListAllImageDetailsRow struct {
	Filename    string                `json:"filename"`
	Metadata    pqtype.NullRawMessage `json:"metadata"`
	Description sql.NullString        `json:"description"`
}

func (q *Queries) ListAllImageDetails(ctx context.Context) ([]ListAllImageDetailsRow, error) {
	rows, err := q.db.QueryContext(ctx, listAllImageDetails)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListAllImageDetailsRow
	for rows.Next() {
		var i ListAllImageDetailsRow
		if err := rows.Scan(&i.Filename, &i.Metadata, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
